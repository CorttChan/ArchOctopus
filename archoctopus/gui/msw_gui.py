#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Wed Sep  7 03:15:22 2022
#

import wx

# begin wxGlade: dependencies
import wx.adv
# end wxGlade

# begin wxGlade: extracode
from archoctopus.gui.constants import *
from archoctopus.gui import custom_outlinebtn
from archoctopus.gui.custom_widgets import svg_bitmap, MyBitmap, MyAnimation, BasePopupCtrl, HistoryListCtrl
import wx.lib.agw.pygauge as pg
# end wxGlade


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((850, 600))
        self.SetTitle(u"ArchOctopus -- 建筑师收集助手")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(MyBitmap(APP_ICON))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_17, 1, wx.EXPAND, 0)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_17.Add(sizer_3, 0, wx.EXPAND, 0)

        self.panel_2 = wx.Panel(self.panel_1, wx.ID_ANY)
        self.panel_2.SetMinSize((250, -1))
        self.panel_2.SetBackgroundColour(wx.Colour(0, 174, 239))
        sizer_3.Add(self.panel_2, 1, wx.EXPAND, 0)

        sizer_25 = wx.BoxSizer(wx.VERTICAL)

        sizer_27 = wx.BoxSizer(wx.VERTICAL)
        sizer_25.Add(sizer_27, 1, wx.EXPAND, 0)

        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27.Add(sizer_9, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.anim_ctrl = wx.adv.AnimationCtrl(self.panel_2, wx.ID_ANY, anim=MyAnimation(APP_ANIM))
        sizer_9.Add(self.anim_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_28 = wx.BoxSizer(wx.VERTICAL)
        sizer_25.Add(sizer_28, 0, wx.EXPAND, 0)

        grid_sizer_1 = wx.GridSizer(1, 4, 0, 15)
        sizer_28.Add(grid_sizer_1, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM, 40)

        self.sync_btn = wx.BitmapButton(self.panel_2, wx.ID_ANY, svg_bitmap(SYNC, 27, 27, colour=wx.WHITE), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.sync_btn.SetBackgroundColour(wx.Colour(0, 174, 239))
        self.sync_btn.SetBitmapCurrent(svg_bitmap(SYNC, 27, 27))
        self.sync_btn.SetSize(self.sync_btn.GetBestSize())
        grid_sizer_1.Add(self.sync_btn, 0, wx.ALIGN_CENTER, 0)

        self.setup_btn = wx.BitmapButton(self.panel_2, wx.ID_ANY, svg_bitmap(SETTINGS, 27, 27, colour=wx.WHITE), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.setup_btn.SetBackgroundColour(wx.Colour(0, 174, 239))
        self.setup_btn.SetBitmapCurrent(svg_bitmap(SETTINGS, 27, 27))
        self.setup_btn.SetSize(self.setup_btn.GetBestSize())
        grid_sizer_1.Add(self.setup_btn, 0, wx.ALIGN_CENTER, 0)

        self.history_btn = wx.BitmapButton(self.panel_2, wx.ID_ANY, svg_bitmap(HISTORY, 27, 27, colour=wx.WHITE), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.history_btn.SetBackgroundColour(wx.Colour(0, 174, 239))
        self.history_btn.SetBitmapCurrent(svg_bitmap(HISTORY, 27, 27))
        self.history_btn.SetSize(self.history_btn.GetBestSize())
        grid_sizer_1.Add(self.history_btn, 0, wx.ALIGN_CENTER, 0)

        self.donate_btn = wx.BitmapButton(self.panel_2, wx.ID_ANY, svg_bitmap(DONATE, 27, 27, colour=wx.WHITE), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.donate_btn.SetBackgroundColour(wx.Colour(0, 174, 239))
        self.donate_btn.SetBitmapCurrent(svg_bitmap(DONATE, 27, 27))
        self.donate_btn.SetSize(self.donate_btn.GetBestSize())
        grid_sizer_1.Add(self.donate_btn, 0, wx.ALIGN_CENTER, 0)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_17.Add(sizer_4, 1, wx.EXPAND, 0)

        self.panel_3 = wx.Panel(self.panel_1, wx.ID_ANY)
        sizer_4.Add(self.panel_3, 1, wx.EXPAND, 0)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(sizer_6, 0, wx.ALL | wx.EXPAND, 0)

        self.panel_4 = wx.Panel(self.panel_3, wx.ID_ANY, style=wx.BORDER_NONE)
        self.panel_4.SetMinSize((-1, 70))
        self.panel_4.SetBackgroundColour(wx.Colour(230, 230, 230))
        sizer_6.Add(self.panel_4, 1, wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_22, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 15)

        self.start_ctrl = wx.BitmapButton(self.panel_4, wx.ID_ANY, svg_bitmap(DOWNLOAD, 24, 24, wx.WHITE), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.start_ctrl.SetMinSize((70, -1))
        self.start_ctrl.SetBackgroundColour(wx.Colour(50, 50, 50))
        sizer_22.Add(self.start_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.url_ctrl = wx.TextCtrl(self.panel_4, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        sizer_22.Add(self.url_ctrl, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_30 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_30, 0, wx.EXPAND, 0)

        static_line_1 = wx.StaticLine(self.panel_4, wx.ID_ANY)
        sizer_30.Add(static_line_1, 0, wx.EXPAND, 0)

        self.sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(self.sizer_7, 1, wx.EXPAND, 0)

        self.panel_5 = wx.ScrolledWindow(self.panel_3, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.panel_5.SetScrollRate(10, 10)
        self.sizer_7.Add(self.panel_5, 1, wx.EXPAND, 0)

        self.sizer_8 = wx.BoxSizer(wx.VERTICAL)

        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_15, 0, wx.EXPAND, 0)

        self.panel_7 = wx.Panel(self.panel_1, wx.ID_ANY)
        self.panel_7.SetMinSize((-1, 30))
        self.panel_7.SetBackgroundColour(wx.Colour(100, 100, 100))
        sizer_15.Add(self.panel_7, 1, wx.EXPAND, 0)

        sizer_29 = wx.BoxSizer(wx.HORIZONTAL)

        self.author_st = wx.StaticText(self.panel_7, wx.ID_ANY, "CorttChan | LemonLv")
        self.author_st.SetForegroundColour(wx.Colour(255, 255, 255))
        self.author_st.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Microsoft YaHei UI"))
        sizer_29.Add(self.author_st, 1, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 10)

        self.sync_status_ctrl = wx.StaticBitmap(self.panel_7, wx.ID_ANY, svg_bitmap(SYNC_DISABLE, 21, 21, colour=wx.WHITE), style=wx.BORDER_NONE)
        self.sync_status_ctrl.SetBackgroundColour(wx.Colour(100, 100, 100))
        sizer_29.Add(self.sync_status_ctrl, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 10)

        self.panel_7.SetSizer(sizer_29)

        self.panel_5.SetSizer(self.sizer_8)

        self.panel_4.SetSizer(sizer_2)

        self.panel_3.SetSizer(sizer_5)

        self.panel_2.SetSizer(sizer_25)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()
        self.SetMinSize(self.GetSize())

        self.Bind(wx.EVT_BUTTON, self.on_open_sync_dlg, self.sync_btn)
        self.Bind(wx.EVT_BUTTON, self.on_open_setup_dlg, self.setup_btn)
        self.Bind(wx.EVT_BUTTON, self.on_open_history_dlg, self.history_btn)
        self.Bind(wx.EVT_BUTTON, self.on_open_donate_link, self.donate_btn)
        self.Bind(wx.EVT_BUTTON, self.on_start, self.start_ctrl)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_start, self.url_ctrl)
        self.Bind(wx.EVT_CLOSE, self.on_close, self)
        # end wxGlade

    def on_open_sync_dlg(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'on_open_sync_dlg' not implemented!")
        event.Skip()

    def on_open_setup_dlg(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'on_open_setup_dlg' not implemented!")
        event.Skip()

    def on_open_history_dlg(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'on_open_history_dlg' not implemented!")
        event.Skip()

    def on_open_donate_link(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'on_open_donate_link' not implemented!")
        event.Skip()

    def on_start(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'on_start' not implemented!")
        event.Skip()

    def on_close(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'on_close' not implemented!")
        event.Skip()

# end of class MyFrame

class SettingDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SettingDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((450, 510))
        self.SetTitle(u"ArchOctopus -- 设置")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(svg_bitmap(SETTINGS))
        self.SetIcon(_icon)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.setting_nb = wx.Notebook(self, wx.ID_ANY)
        sizer_1.Add(self.setting_nb, 1, wx.ALL | wx.EXPAND, 8)

        self.general_panel = wx.Panel(self.setting_nb, wx.ID_ANY)
        self.setting_nb.AddPage(self.general_panel, u"常规")

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        label_7 = wx.StaticText(self.general_panel, wx.ID_ANY, u"常规设置")
        sizer_5.Add(label_7, 0, wx.ALL, 10)

        sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self.general_panel, wx.ID_ANY, u"常规"), wx.VERTICAL)
        sizer_5.Add(sizer_7, 0, wx.ALL | wx.EXPAND, 10)

        grid_sizer_3 = wx.GridBagSizer(5, 25)
        sizer_7.Add(grid_sizer_3, 0, wx.EXPAND, 0)

        label_23 = wx.StaticText(self.general_panel, wx.ID_ANY, u"下载路径:")
        label_23.SetMinSize((100, -1))
        grid_sizer_3.Add(label_23, (0, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_19 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_3.Add(sizer_19, (0, 1), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        self.download_dir_btn = wx.Button(self.general_panel, wx.ID_ANY, u"选择文件夹")
        self.download_dir_btn.SetMinSize((85, 30))
        self.download_dir_btn.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        sizer_19.Add(self.download_dir_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.download_dir_display = wx.StaticText(self.general_panel, wx.ID_ANY, "", style=wx.ST_ELLIPSIZE_START | wx.ST_NO_AUTORESIZE)
        self.download_dir_display.SetMinSize((160, -1))
        self.download_dir_display.SetForegroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT))
        sizer_19.Add(self.download_dir_display, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)

        label_8 = wx.StaticText(self.general_panel, wx.ID_ANY, u"循环请求次数:")
        label_8.SetMinSize((100, -1))
        grid_sizer_3.Add(label_8, (1, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        self.loop_max_ctrl = wx.TextCtrl(self.general_panel, wx.ID_ANY, "", style=wx.TE_CENTRE)
        self.loop_max_ctrl.SetMinSize((85, -1))
        grid_sizer_3.Add(self.loop_max_ctrl, (1, 1), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        label_24 = wx.StaticText(self.general_panel, wx.ID_ANY, u"自动剪贴板")
        label_24.SetMinSize((100, -1))
        grid_sizer_3.Add(label_24, (2, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        self.clip_toggle_ctrl = wx.BitmapToggleButton(self.general_panel, wx.ID_ANY, svg_bitmap(TOGGLE_OFF, 27, 27, colour=wx.Colour((160, 160, 160))), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_LEFT)
        self.clip_toggle_ctrl.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.clip_toggle_ctrl.SetBitmapPressed(svg_bitmap(TOGGLE_ON, 27, 27, colour=wx.Colour((0, 174, 239))))
        self.clip_toggle_ctrl.SetSize(self.clip_toggle_ctrl.GetBestSize())
        grid_sizer_3.Add(self.clip_toggle_ctrl, (2, 1), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        label_22 = wx.StaticText(self.general_panel, wx.ID_ANY, u"保存页面PDF:")
        label_22.SetMinSize((100, -1))
        grid_sizer_3.Add(label_22, (3, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        self.pdf_toggle_ctrl = wx.BitmapToggleButton(self.general_panel, wx.ID_ANY, svg_bitmap(TOGGLE_OFF, 27, 27, colour=wx.Colour((160, 160, 160))), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.pdf_toggle_ctrl.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.pdf_toggle_ctrl.SetBitmapPressed(svg_bitmap(TOGGLE_ON, 27, 27, colour=wx.Colour((0, 174, 239))))
        self.pdf_toggle_ctrl.SetSize(self.pdf_toggle_ctrl.GetBestSize())
        grid_sizer_3.Add(self.pdf_toggle_ctrl, (3, 1), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        label_9 = wx.StaticText(self.general_panel, wx.ID_ANY, u"最小化到任务栏:")
        label_9.SetMinSize((100, -1))
        grid_sizer_3.Add(label_9, (4, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        self.taskbar_toggle_ctrl = wx.BitmapToggleButton(self.general_panel, wx.ID_ANY, svg_bitmap(TOGGLE_OFF, 27, 27, colour=wx.Colour((160, 160, 160))), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.taskbar_toggle_ctrl.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.taskbar_toggle_ctrl.SetBitmapPressed(svg_bitmap(TOGGLE_ON, 27, 27, colour=wx.Colour((0, 174, 239))))
        self.taskbar_toggle_ctrl.SetSize(self.taskbar_toggle_ctrl.GetBestSize())
        grid_sizer_3.Add(self.taskbar_toggle_ctrl, (4, 1), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        label_10 = wx.StaticText(self.general_panel, wx.ID_ANY, u"自动检查更新:")
        label_10.SetMinSize((100, -1))
        grid_sizer_3.Add(label_10, (5, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        self.update_toggle_ctrl = wx.BitmapToggleButton(self.general_panel, wx.ID_ANY, svg_bitmap(TOGGLE_OFF, 27, 27, colour=wx.Colour((160, 160, 160))), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.update_toggle_ctrl.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.update_toggle_ctrl.SetBitmapPressed(svg_bitmap(TOGGLE_ON, 27, 27, colour=wx.Colour((0, 174, 239))))
        self.update_toggle_ctrl.SetSize(self.update_toggle_ctrl.GetBestSize())
        grid_sizer_3.Add(self.update_toggle_ctrl, (5, 1), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_20 = wx.StaticBoxSizer(wx.StaticBox(self.general_panel, wx.ID_ANY, u"隐私"), wx.VERTICAL)
        sizer_5.Add(sizer_20, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        grid_sizer_2 = wx.GridBagSizer(5, 25)
        sizer_20.Add(grid_sizer_2, 0, wx.EXPAND, 0)

        label_25 = wx.StaticText(self.general_panel, wx.ID_ANY, u"分享Tags:")
        label_25.SetMinSize((100, -1))
        grid_sizer_2.Add(label_25, (0, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        self.privacy_tag_ctrl = wx.BitmapToggleButton(self.general_panel, wx.ID_ANY, svg_bitmap(TOGGLE_OFF, 27, 27, colour=wx.Colour((160, 160, 160))), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.privacy_tag_ctrl.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.privacy_tag_ctrl.SetBitmapPressed(svg_bitmap(TOGGLE_ON, 27, 27, colour=wx.Colour((0, 174, 239))))
        self.privacy_tag_ctrl.SetSize(self.privacy_tag_ctrl.GetBestSize())
        grid_sizer_2.Add(self.privacy_tag_ctrl, (0, 1), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        label_26 = wx.StaticText(self.general_panel, wx.ID_ANY, u"开启Debug:")
        label_26.SetMinSize((100, -1))
        grid_sizer_2.Add(label_26, (1, 0), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        self.privacy_debug_ctrl = wx.BitmapToggleButton(self.general_panel, wx.ID_ANY, svg_bitmap(TOGGLE_OFF, 27, 27, colour=wx.Colour((160, 160, 160))), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.privacy_debug_ctrl.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.privacy_debug_ctrl.SetBitmapPressed(svg_bitmap(TOGGLE_ON, 27, 27, colour=wx.Colour((0, 174, 239))))
        self.privacy_debug_ctrl.SetSize(self.privacy_debug_ctrl.GetBestSize())
        grid_sizer_2.Add(self.privacy_debug_ctrl, (1, 1), (1, 1), wx.ALIGN_CENTER_VERTICAL, 0)

        self.proxy_panel = wx.Panel(self.setting_nb, wx.ID_ANY)
        self.setting_nb.AddPage(self.proxy_panel, u"代理")

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(self.proxy_panel, wx.ID_ANY, u"配置访问互联网的代理服务器")
        sizer_3.Add(label_1, 0, wx.ALL, 10)

        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.proxy_panel, wx.ID_ANY, u"代理"), wx.VERTICAL)
        sizer_3.Add(sizer_4, 0, wx.ALL | wx.EXPAND, 10)

        grid_sizer_1 = wx.FlexGridSizer(5, 2, 5, 30)
        sizer_4.Add(grid_sizer_1, 0, wx.EXPAND, 0)

        label_2 = wx.StaticText(self.proxy_panel, wx.ID_ANY, "IP:")
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.proxy_host_text_ctrl = wx.TextCtrl(self.proxy_panel, wx.ID_ANY, "")
        self.proxy_host_text_ctrl.SetMinSize((200, -1))
        grid_sizer_1.Add(self.proxy_host_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_3 = wx.StaticText(self.proxy_panel, wx.ID_ANY, u"端口:")
        grid_sizer_1.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.proxy_port_text_ctrl = wx.TextCtrl(self.proxy_panel, wx.ID_ANY, "")
        self.proxy_port_text_ctrl.SetMinSize((200, -1))
        grid_sizer_1.Add(self.proxy_port_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_4 = wx.StaticText(self.proxy_panel, wx.ID_ANY, u"验证:")
        grid_sizer_1.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.proxy_auth_toggle_ctrl = wx.BitmapToggleButton(self.proxy_panel, wx.ID_ANY, svg_bitmap(TOGGLE_OFF, 27, 27, colour=wx.Colour((160, 160, 160))), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT)
        self.proxy_auth_toggle_ctrl.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.proxy_auth_toggle_ctrl.SetBitmapPressed(svg_bitmap(TOGGLE_ON, 27, 27, colour=wx.Colour((0, 174, 239))))
        self.proxy_auth_toggle_ctrl.SetSize(self.proxy_auth_toggle_ctrl.GetBestSize())
        grid_sizer_1.Add(self.proxy_auth_toggle_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_5 = wx.StaticText(self.proxy_panel, wx.ID_ANY, u"账户:")
        grid_sizer_1.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.proxy_user_text_ctrl = wx.TextCtrl(self.proxy_panel, wx.ID_ANY, "")
        self.proxy_user_text_ctrl.SetMinSize((200, -1))
        grid_sizer_1.Add(self.proxy_user_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_6 = wx.StaticText(self.proxy_panel, wx.ID_ANY, u"密码:")
        grid_sizer_1.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.proxy_pwd_text_ctrl = wx.TextCtrl(self.proxy_panel, wx.ID_ANY, "", style=wx.TE_PASSWORD)
        self.proxy_pwd_text_ctrl.SetMinSize((200, -1))
        grid_sizer_1.Add(self.proxy_pwd_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.custom_panel = wx.Panel(self.setting_nb, wx.ID_ANY)
        self.custom_panel.Enable(False)
        self.custom_panel.Hide()
        self.setting_nb.AddPage(self.custom_panel, u"规则")

        sizer_8 = wx.BoxSizer(wx.VERTICAL)

        label_11 = wx.StaticText(self.custom_panel, wx.ID_ANY, u"自定义下载规则 (开发测试用途, 发行版本已禁用此选项栏)")
        sizer_8.Add(label_11, 0, wx.ALL, 10)

        self.sizer_9 = wx.StaticBoxSizer(wx.StaticBox(self.custom_panel, wx.ID_ANY, u"规则"), wx.VERTICAL)
        sizer_8.Add(self.sizer_9, 1, wx.ALL | wx.EXPAND, 10)

        sizer_18 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_9.Add(sizer_18, 0, wx.EXPAND, 0)

        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18.Add(sizer_10, 0, wx.BOTTOM | wx.EXPAND, 5)

        label_12 = wx.StaticText(self.custom_panel, wx.ID_ANY, u"添加自定义下载规则：")
        sizer_10.Add(label_12, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        self.add_rule_btn = wx.BitmapButton(self.custom_panel, wx.ID_ANY, MyBitmap(ADD_BTN), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.add_rule_btn.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.add_rule_btn.SetSize(self.add_rule_btn.GetBestSize())
        sizer_10.Add(self.add_rule_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        static_line_1 = wx.StaticLine(self.custom_panel, wx.ID_ANY)
        sizer_18.Add(static_line_1, 0, wx.EXPAND, 0)

        self.sizer_11 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_9.Add(self.sizer_11, 1, wx.EXPAND, 0)

        self.rule_panel = wx.ScrolledWindow(self.custom_panel, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.rule_panel.SetScrollRate(10, 10)
        self.sizer_11.Add(self.rule_panel, 1, wx.EXPAND, 0)

        self.sizer_21 = wx.BoxSizer(wx.VERTICAL)

        self.filter_panel = wx.Panel(self.setting_nb, wx.ID_ANY)
        self.setting_nb.AddPage(self.filter_panel, u"过滤")

        sizer_12 = wx.BoxSizer(wx.VERTICAL)

        label_13 = wx.StaticText(self.filter_panel, wx.ID_ANY, u"图片过滤设置")
        sizer_12.Add(label_13, 0, wx.ALL, 10)

        sizer_13 = wx.StaticBoxSizer(wx.StaticBox(self.filter_panel, wx.ID_ANY, u"图片尺寸"), wx.VERTICAL)
        sizer_12.Add(sizer_13, 0, wx.ALL | wx.EXPAND, 10)

        grid_sizer_4 = wx.FlexGridSizer(2, 3, 5, 0)
        sizer_13.Add(grid_sizer_4, 1, wx.EXPAND, 0)

        label_14 = wx.StaticText(self.filter_panel, wx.ID_ANY, "Min-Width:")
        label_14.SetMinSize((90, -1))
        grid_sizer_4.Add(label_14, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.min_width_text_ctrl = wx.TextCtrl(self.filter_panel, wx.ID_ANY, "")
        self.min_width_text_ctrl.SetMinSize((150, -1))
        grid_sizer_4.Add(self.min_width_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_15 = wx.StaticText(self.filter_panel, wx.ID_ANY, ".px")
        grid_sizer_4.Add(label_15, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_16 = wx.StaticText(self.filter_panel, wx.ID_ANY, "Min-Height:")
        label_16.SetMinSize((90, -1))
        grid_sizer_4.Add(label_16, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.min_height_text_ctrl = wx.TextCtrl(self.filter_panel, wx.ID_ANY, "")
        self.min_height_text_ctrl.SetMinSize((150, -1))
        grid_sizer_4.Add(self.min_height_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_17 = wx.StaticText(self.filter_panel, wx.ID_ANY, ".px")
        grid_sizer_4.Add(label_17, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_14 = wx.StaticBoxSizer(wx.StaticBox(self.filter_panel, wx.ID_ANY, u"文件大小"), wx.VERTICAL)
        sizer_12.Add(sizer_14, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        grid_sizer_5 = wx.FlexGridSizer(2, 3, 5, 0)
        sizer_14.Add(grid_sizer_5, 1, wx.EXPAND, 0)

        label_18 = wx.StaticText(self.filter_panel, wx.ID_ANY, "Min-Size:")
        label_18.SetMinSize((90, -1))
        grid_sizer_5.Add(label_18, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.min_size_text_ctrl = wx.TextCtrl(self.filter_panel, wx.ID_ANY, "")
        self.min_size_text_ctrl.SetMinSize((150, -1))
        grid_sizer_5.Add(self.min_size_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_19 = wx.StaticText(self.filter_panel, wx.ID_ANY, ".kb")
        grid_sizer_5.Add(label_19, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_20 = wx.StaticText(self.filter_panel, wx.ID_ANY, "Max-Size:")
        label_20.SetMinSize((90, -1))
        grid_sizer_5.Add(label_20, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.max_size_text_ctrl = wx.TextCtrl(self.filter_panel, wx.ID_ANY, "")
        self.max_size_text_ctrl.SetMinSize((150, -1))
        grid_sizer_5.Add(self.max_size_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        label_21 = wx.StaticText(self.filter_panel, wx.ID_ANY, ".kb")
        grid_sizer_5.Add(label_21, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_15 = wx.StaticBoxSizer(wx.StaticBox(self.filter_panel, wx.ID_ANY, u"图片类型"), wx.VERTICAL)
        sizer_12.Add(sizer_15, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        self.image_all_type = wx.RadioButton(self.filter_panel, wx.ID_ANY, "All images", style=wx.RB_GROUP)
        sizer_15.Add(self.image_all_type, 1, wx.BOTTOM | wx.EXPAND | wx.TOP, 5)

        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15.Add(sizer_16, 1, wx.BOTTOM | wx.EXPAND, 5)

        self.filter_image_type = wx.RadioButton(self.filter_panel, wx.ID_ANY, "Selection")
        sizer_16.Add(self.filter_image_type, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.jpg_checkbox = wx.CheckBox(self.filter_panel, wx.ID_ANY, ".jpeg")
        sizer_16.Add(self.jpg_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.png_checkbox = wx.CheckBox(self.filter_panel, wx.ID_ANY, ".png")
        sizer_16.Add(self.png_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.gif_checkbox = wx.CheckBox(self.filter_panel, wx.ID_ANY, ".gif")
        sizer_16.Add(self.gif_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.bmp_checkbox = wx.CheckBox(self.filter_panel, wx.ID_ANY, ".bmp")
        sizer_16.Add(self.bmp_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.webp_checkbox = wx.CheckBox(self.filter_panel, wx.ID_ANY, ".webp")
        sizer_16.Add(self.webp_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.default_checkbox = wx.CheckBox(self.filter_panel, wx.ID_ANY, u"若文件无后缀名，则默认保存为 \"JPEG\"")
        sizer_15.Add(self.default_checkbox, 1, wx.BOTTOM | wx.EXPAND, 5)

        self.prefix_index = wx.CheckBox(self.filter_panel, wx.ID_ANY, u"文件名添加数字前缀 “num_”，防止名称相同时下载文件被覆盖。")
        sizer_15.Add(self.prefix_index, 1, wx.BOTTOM | wx.EXPAND, 5)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 5)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.filter_panel.SetSizer(sizer_12)

        self.rule_panel.SetSizer(self.sizer_21)

        self.custom_panel.SetSizer(sizer_8)

        self.proxy_panel.SetSizer(sizer_3)

        self.general_panel.SetSizer(sizer_5)

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.on_select_dir, self.download_dir_btn)
        self.Bind(wx.EVT_BUTTON, self.on_add_rule, self.add_rule_btn)
        self.Bind(wx.EVT_RADIOBUTTON, self.on_image_all_type, self.image_all_type)
        self.Bind(wx.EVT_RADIOBUTTON, self.on_filter_image_type, self.filter_image_type)
        self.Bind(wx.EVT_CHECKBOX, self.on_filter_checkbox, self.jpg_checkbox)
        self.Bind(wx.EVT_CHECKBOX, self.on_filter_checkbox, self.png_checkbox)
        self.Bind(wx.EVT_CHECKBOX, self.on_filter_checkbox, self.gif_checkbox)
        self.Bind(wx.EVT_CHECKBOX, self.on_filter_checkbox, self.bmp_checkbox)
        self.Bind(wx.EVT_CHECKBOX, self.on_filter_checkbox, self.webp_checkbox)
        # end wxGlade

    def on_select_dir(self, event):  # wxGlade: SettingDialog.<event_handler>
        print("Event handler 'on_select_dir' not implemented!")
        event.Skip()

    def on_add_rule(self, event):  # wxGlade: SettingDialog.<event_handler>
        print("Event handler 'on_add_rule' not implemented!")
        event.Skip()

    def on_image_all_type(self, event):  # wxGlade: SettingDialog.<event_handler>
        print("Event handler 'on_image_all_type' not implemented!")
        event.Skip()

    def on_filter_image_type(self, event):  # wxGlade: SettingDialog.<event_handler>
        print("Event handler 'on_filter_image_type' not implemented!")
        event.Skip()

    def on_filter_checkbox(self, event):  # wxGlade: SettingDialog.<event_handler>
        print("Event handler 'on_filter_checkbox' not implemented!")
        event.Skip()

# end of class SettingDialog

class HistoryDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: HistoryDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((800, 510))
        self.SetTitle(u"ArchOctopus -- 历史")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(svg_bitmap(HISTORY))
        self.SetIcon(_icon)
        self.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Microsoft YaHei UI"))

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_4, 0, wx.ALL | wx.EXPAND, 10)

        self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_NONE | wx.TAB_TRAVERSAL)
        self.panel_1.SetMinSize((180, -1))
        sizer_4.Add(self.panel_1, 1, wx.EXPAND, 0)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_6.Add(sizer_7, 0, wx.EXPAND | wx.TOP, 10)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, u"分类标签 :")
        label_1.SetFocus()
        sizer_7.Add(label_1, 0, wx.EXPAND, 0)

        static_line_1 = wx.StaticLine(self.panel_1, wx.ID_ANY)
        sizer_7.Add(static_line_1, 0, wx.EXPAND, 0)

        self.sizer_tags = wx.WrapSizer(wx.HORIZONTAL)
        sizer_6.Add(self.sizer_tags, 1, wx.EXPAND | wx.TOP, 10)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_3.Add(sizer_5, 1, wx.BOTTOM | wx.EXPAND | wx.RIGHT, 10)

        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        self.panel_2.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        sizer_5.Add(self.panel_2, 1, wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        self.panel_4 = wx.Panel(self.panel_2, wx.ID_ANY)
        self.panel_4.SetMinSize((-1, 40))
        self.panel_4.SetBackgroundColour(wx.Colour(192, 192, 192))
        sizer_2.Add(self.panel_4, 0, wx.EXPAND, 0)

        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)

        label_2 = wx.StaticText(self.panel_4, wx.ID_ANY, u"素材收集记录 :")
        sizer_8.Add(label_2, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)

        self.search_ctrl = wx.SearchCtrl(self.panel_4, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
        self.search_ctrl.SetMinSize((200, -1))
        self.search_ctrl.SetDescriptiveText("Search")
        sizer_8.Add(self.search_ctrl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)

        self.history_listctrl = HistoryListCtrl(self.panel_2, wx.ID_ANY, style=wx.BORDER_NONE | wx.LC_HRULES | wx.LC_REPORT | wx.LC_SINGLE_SEL)
        sizer_2.Add(self.history_listctrl, 1, wx.EXPAND, 0)

        static_line_2 = wx.StaticLine(self.panel_2, wx.ID_ANY)
        sizer_2.Add(static_line_2, 0, wx.EXPAND, 0)

        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_9, 0, wx.ALIGN_RIGHT | wx.ALL, 10)

        self.cur_items_st = wx.StaticText(self.panel_2, wx.ID_ANY, "1-10", style=wx.ALIGN_RIGHT)
        self.cur_items_st.SetMinSize((150, -1))
        sizer_9.Add(self.cur_items_st, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        label_3 = wx.StaticText(self.panel_2, wx.ID_ANY, "/")
        sizer_9.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)

        self.total_items_st = wx.StaticText(self.panel_2, wx.ID_ANY, "100")
        sizer_9.Add(self.total_items_st, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.prev_btn = wx.BitmapButton(self.panel_2, wx.ID_ANY, svg_bitmap(LEFT, 24, 24, colour=wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT)), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.prev_btn.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.prev_btn.Enable(False)
        self.prev_btn.SetBitmapCurrent(svg_bitmap(LEFT, 24, 24))
        self.prev_btn.SetSize(self.prev_btn.GetBestSize())
        sizer_9.Add(self.prev_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 25)

        self.next_btn = wx.BitmapButton(self.panel_2, wx.ID_ANY, svg_bitmap(RIGHT, 24, 24, colour=wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT)), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.next_btn.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.next_btn.SetBitmapCurrent(svg_bitmap(RIGHT, 24, 24))
        self.next_btn.SetSize(self.next_btn.GetBestSize())
        sizer_9.Add(self.next_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 10)

        self.panel_4.SetSizer(sizer_8)

        self.panel_2.SetSizer(sizer_2)

        self.panel_1.SetSizer(sizer_6)

        self.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_SEARCHCTRL_SEARCH_BTN, self.on_search, self.search_ctrl)
        self.Bind(wx.EVT_TEXT, self.on_text, self.search_ctrl)
        self.Bind(wx.EVT_TEXT_ENTER, self.on_search, self.search_ctrl)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.on_folder, self.history_listctrl)
        self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.on_right_click, self.history_listctrl)
        self.Bind(wx.EVT_BUTTON, self.on_prev, self.prev_btn)
        self.Bind(wx.EVT_BUTTON, self.on_next, self.next_btn)
        # end wxGlade

    def on_search(self, event):  # wxGlade: HistoryDialog.<event_handler>
        print("Event handler 'on_search' not implemented!")
        event.Skip()

    def on_text(self, event):  # wxGlade: HistoryDialog.<event_handler>
        print("Event handler 'on_text' not implemented!")
        event.Skip()

    def on_folder(self, event):  # wxGlade: HistoryDialog.<event_handler>
        print("Event handler 'on_folder' not implemented!")
        event.Skip()

    def on_right_click(self, event):  # wxGlade: HistoryDialog.<event_handler>
        print("Event handler 'on_right_click' not implemented!")
        event.Skip()

    def on_prev(self, event):  # wxGlade: HistoryDialog.<event_handler>
        print("Event handler 'on_prev' not implemented!")
        event.Skip()

    def on_next(self, event):  # wxGlade: HistoryDialog.<event_handler>
        print("Event handler 'on_next' not implemented!")
        event.Skip()

# end of class HistoryDialog

class TaskPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: TaskPanel.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 5)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_3, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        self.task_name = wx.StaticText(self, wx.ID_ANY, "task_name", style=wx.ST_ELLIPSIZE_END | wx.ST_NO_AUTORESIZE)
        self.task_name.SetFont(wx.Font(11, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Microsoft YaHei UI"))
        sizer_3.Add(self.task_name, 1, wx.EXPAND, 0)

        self.sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(self.sizer_7, 1, wx.EXPAND, 0)

        self.imgs_sum = wx.StaticText(self, wx.ID_ANY, "")
        self.imgs_sum.SetMinSize((100, -1))
        self.imgs_sum.SetForegroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT))
        self.sizer_7.Add(self.imgs_sum, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.tags_btn = wx.BitmapButton(self, wx.ID_ANY, svg_bitmap(TAG, colour=wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT)), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.tags_btn.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.tags_btn.SetBitmapCurrent(svg_bitmap(TAG))
        self.tags_btn.SetSize(self.tags_btn.GetBestSize())
        self.sizer_7.Add(self.tags_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)

        self.sizer_tags = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_7.Add(self.sizer_tags, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.default_tag = custom_outlinebtn.PlateButton(self, wx.ID_ANY, label=" 未分类 ")
        self.default_tag.Hide()
        self.default_tag.SetLabelColor(normal=wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT),
                               hlight=wx.WHITE)
        """
        self.default_tag.SetPressColor(wx.Colour(0, 174, 239))
        """
        self.sizer_tags.Add(self.default_tag, 0, 0, 0)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.pause_btn = wx.BitmapButton(self, wx.ID_ANY, svg_bitmap(PAUSE, colour=wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT)), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.pause_btn.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.pause_btn.Enable(False)
        self.pause_btn.SetBitmapCurrent(svg_bitmap(PAUSE))
        self.pause_btn.SetSize(self.pause_btn.GetBestSize())
        sizer_5.Add(self.pause_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.delete_btn = wx.BitmapButton(self, wx.ID_ANY, svg_bitmap(CLOSE, colour=wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT)), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.delete_btn.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.delete_btn.SetBitmapCurrent(svg_bitmap(CLOSE))
        self.delete_btn.SetSize(self.delete_btn.GetBestSize())
        sizer_5.Add(self.delete_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.folder_btn = wx.BitmapButton(self, wx.ID_ANY, svg_bitmap(FOLDER, colour=wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT)), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.folder_btn.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.folder_btn.SetBitmapCurrent(svg_bitmap(FOLDER))
        self.folder_btn.SetSize(self.folder_btn.GetBestSize())
        sizer_5.Add(self.folder_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_6, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)

        self.gauge = pg.PyGauge(self, wx.ID_ANY, style=wx.GA_HORIZONTAL | wx.GA_SMOOTH | wx.BORDER_NONE)
        self.gauge.SetMinSize((-1, 4))
        self.gauge.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOW))
        self.gauge.SetBarColor(wx.Colour(0, 174, 239))
        self.gauge.SetBorderColor(self.GetBackgroundColour())
        # self.gauge.SetRange(100)
        # self.gauge.SetValue(0)
        sizer_6.Add(self.gauge, 1, wx.ALIGN_BOTTOM, 0)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.on_tags_popup, self.tags_btn)
        self.Bind(wx.EVT_BUTTON, self.on_pause, self.pause_btn)
        self.Bind(wx.EVT_BUTTON, self.on_delete, self.delete_btn)
        self.Bind(wx.EVT_BUTTON, self.on_folder, self.folder_btn)
        # end wxGlade

    def on_tags_popup(self, event):  # wxGlade: TaskPanel.<event_handler>
        print("Event handler 'on_tags_popup' not implemented!")
        event.Skip()

    def on_pause(self, event):  # wxGlade: TaskPanel.<event_handler>
        print("Event handler 'on_pause' not implemented!")
        event.Skip()

    def on_delete(self, event):  # wxGlade: TaskPanel.<event_handler>
        print("Event handler 'on_delete' not implemented!")
        event.Skip()

    def on_folder(self, event):  # wxGlade: TaskPanel.<event_handler>
        print("Event handler 'on_folder' not implemented!")
        event.Skip()

# end of class TaskPanel

class SyncDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: SyncDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((850, 539))
        self.SetTitle(u"ArchOctopus - 同步")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(svg_bitmap(SYNC))
        self.SetIcon(_icon)
        self.SetFont(wx.Font(9, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_LIGHT, 0, "Microsoft YaHei UI Light"))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 5)

        self.sync_toggle_ctrl = wx.BitmapToggleButton(self, wx.ID_ANY, svg_bitmap(TOGGLE_OFF, 36, 36, colour=wx.Colour((160, 160, 160))), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_LEFT)
        self.sync_toggle_ctrl.SetBitmapPressed(svg_bitmap(TOGGLE_ON, 36, 36, colour=wx.Colour((0, 174, 239))))
        self.sync_toggle_ctrl.SetSize(self.sync_toggle_ctrl.GetBestSize())
        sizer_3.Add(self.sync_toggle_ctrl, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 10)

        self.status_label_1 = wx.StaticText(self, wx.ID_ANY, u"同步关闭")
        sizer_3.Add(self.status_label_1, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        self.status_label_2 = wx.StaticText(self, wx.ID_ANY, u"ArchOctopus 正在同步文件...")
        sizer_3.Add(self.status_label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 10)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)

        static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        sizer_4.Add(static_line_1, 0, wx.EXPAND, 0)

        self.account_nb = wx.Notebook(self, wx.ID_ANY)
        sizer_4.Add(self.account_nb, 1, wx.EXPAND, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 10)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        sizer_2.Realize()

        self.SetSizer(sizer_1)

        self.SetAffirmativeId(self.button_OK.GetId())

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_sync, self.sync_toggle_ctrl)
        # end wxGlade

    def on_sync(self, event):  # wxGlade: SyncDialog.<event_handler>
        print("Event handler 'on_sync' not implemented!")
        event.Skip()

# end of class SyncDialog

class DonateDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DonateDialog.__init__
        # add user code--------------------

        donate_25_id = wx.NewIdRef()
        donate_50_id = wx.NewIdRef()
        donate_75_id = wx.NewIdRef()
        donate_100_id = wx.NewIdRef()
        donate_other_id = wx.NewIdRef()

        self.id_pair = {donate_25_id: DONATE_25,
                        donate_50_id: DONATE_50,
                        donate_75_id: DONATE_75,
                        donate_100_id: DONATE_100,
                        donate_other_id: DONATE_OTHER}

        # end user code--------------------
        kwds["style"] = kwds.get("style", 0)
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((800, 500))
        self.SetTitle("ArchOctopus -- Donate")
        self.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Microsoft YaHei UI"))

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_7, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        label_4 = wx.StaticText(self, wx.ID_ANY, u"支持 ArchOctopus")
        label_4.SetFont(wx.Font(14, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Microsoft YaHei UI"))
        sizer_7.Add(label_4, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)

        label_5 = wx.StaticText(self, wx.ID_ANY, u"ArchOctopus 致力于成为快速收集素材的通用型工具，\n若有幸对您有所帮助，欢迎提供捐助支持。", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_7.Add(label_5, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        static_line_1 = wx.StaticLine(self, wx.ID_ANY)
        sizer_7.Add(static_line_1, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 30)

        label_8 = wx.StaticText(self, wx.ID_ANY, u"款项用途：")
        label_8.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Microsoft YaHei UI"))
        sizer_7.Add(label_8, 0, 0, 0)

        label_6 = wx.StaticText(self, wx.ID_ANY, u"     •  程序的持续优化与维护；\n     •  给作者买一杯温暖提神的咖啡；")
        sizer_7.Add(label_6, 0, 0, 0)

        self.donation_list_btn = wx.Button(self, wx.ID_ANY, u"捐助列表", style=wx.BORDER_NONE)
        self.donation_list_btn.SetMinSize((-1, 50))
        self.donation_list_btn.SetBackgroundColour(wx.Colour(125, 125, 125))
        self.donation_list_btn.SetForegroundColour(wx.Colour(255, 255, 255))
        sizer_7.Add(self.donation_list_btn, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 15)

        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7.Add(sizer_8, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        label_7 = wx.StaticText(self, wx.ID_ANY, u"对您的捐助有疑问？")
        sizer_8.Add(label_7, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        mailtome = wx.adv.HyperlinkCtrl(self, wx.ID_ANY, u"请给我发邮件", "mailto://cortt.me@gmail.com?subject=ArchOctopus%20Donate")
        sizer_8.Add(mailtome, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        static_line_2 = wx.StaticLine(self, wx.ID_ANY, style=wx.LI_VERTICAL)
        sizer_1.Add(static_line_2, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 10)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_6, 1, wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(sizer_2, 0, wx.ALIGN_RIGHT | wx.ALL, 10)

        self.close_btn = wx.BitmapButton(self, wx.ID_ANY, svg_bitmap(CLOSE, 30, 30), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
        self.close_btn.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.close_btn.Hide()
        self.close_btn.SetSize(self.close_btn.GetBestSize())
        sizer_2.Add(self.close_btn, 0, wx.EXPAND | wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 10)

        self.payment_qr = wx.StaticBitmap(self, wx.ID_ANY, MyBitmap(DONATE_50), style=wx.BORDER_NONE)
        sizer_3.Add(self.payment_qr, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_6.Add(sizer_4, 0, wx.EXPAND, 0)

        label_2 = wx.StaticText(self, wx.ID_ANY, u"选择赞助金额：")
        sizer_4.Add(label_2, 0, wx.LEFT, 10)

        grid_sizer_1 = wx.GridBagSizer(7, 7)
        sizer_4.Add(grid_sizer_1, 0, wx.ALL | wx.EXPAND, 10)

        self.btn_rmb_25 = wx.ToggleButton(self, donate_25_id, u"￥25.00")
        self.btn_rmb_25.SetMinSize((-1, 50))
        self.btn_rmb_25.SetBackgroundColour(wx.Colour(255, 255, 255))
        grid_sizer_1.Add(self.btn_rmb_25, (0, 0), (1, 1), wx.EXPAND, 0)

        self.btn_rmb_50 = wx.ToggleButton(self, donate_50_id, u"￥50.00")
        self.btn_rmb_50.SetMinSize((-1, 50))
        self.btn_rmb_50.SetBackgroundColour(wx.Colour(255, 255, 255))
        grid_sizer_1.Add(self.btn_rmb_50, (0, 1), (1, 1), wx.EXPAND, 0)

        self.btn_rmb_75 = wx.ToggleButton(self, donate_75_id, u"￥75.00")
        self.btn_rmb_75.SetMinSize((-1, 50))
        self.btn_rmb_75.SetBackgroundColour(wx.Colour(255, 255, 255))
        grid_sizer_1.Add(self.btn_rmb_75, (0, 2), (1, 1), wx.EXPAND, 0)

        self.btn_rmb_100 = wx.ToggleButton(self, donate_100_id, u"￥100.00")
        self.btn_rmb_100.SetMinSize((-1, 50))
        self.btn_rmb_100.SetBackgroundColour(wx.Colour(255, 255, 255))
        grid_sizer_1.Add(self.btn_rmb_100, (1, 0), (1, 1), wx.EXPAND, 0)

        self.btn_rmb_other = wx.ToggleButton(self, donate_other_id, u"其他金额")
        self.btn_rmb_other.SetMinSize((-1, 50))
        self.btn_rmb_other.SetBackgroundColour(wx.Colour(255, 255, 255))
        grid_sizer_1.Add(self.btn_rmb_other, (1, 1), (1, 2), wx.EXPAND, 0)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_5, 1, wx.ALL | wx.EXPAND, 10)

        info_bitmap = wx.StaticBitmap(self, wx.ID_ANY, svg_bitmap(INFO, 30, 30))
        sizer_5.Add(info_bitmap, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 10)

        label_3 = wx.StaticText(self, wx.ID_ANY, u"捐助仅为赞赏行为，并非构成商业关系；\n本软件为免费程序，捐助与否，不会影响软件的任何功能。")
        sizer_5.Add(label_3, 0, wx.EXPAND, 0)

        grid_sizer_1.AddGrowableRow(0)
        grid_sizer_1.AddGrowableRow(1)
        grid_sizer_1.AddGrowableCol(0)
        grid_sizer_1.AddGrowableCol(1)
        grid_sizer_1.AddGrowableCol(2)

        self.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.on_open_donation_list_page, self.donation_list_btn)
        self.Bind(wx.EVT_BUTTON, self.on_close, self.close_btn)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_change_qr, self.btn_rmb_25)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_change_qr, self.btn_rmb_50)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_change_qr, self.btn_rmb_75)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_change_qr, self.btn_rmb_100)
        self.Bind(wx.EVT_TOGGLEBUTTON, self.on_change_qr, self.btn_rmb_other)
        # end wxGlade

    def on_open_donation_list_page(self, event):  # wxGlade: DonateDialog.<event_handler>
        print("Event handler 'on_open_donation_list_page' not implemented!")
        event.Skip()

    def on_close(self, event):  # wxGlade: DonateDialog.<event_handler>
        print("Event handler 'on_close' not implemented!")
        event.Skip()

    def on_change_qr(self, event):  # wxGlade: DonateDialog.<event_handler>
        print("Event handler 'on_change_qr' not implemented!")
        event.Skip()

# end of class DonateDialog

class MyAbout(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyAbout.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((580, 300))
        self.SetTitle(u"ArchOctopus - 关于")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(MyBitmap(APP_TB_ICON))
        self.SetIcon(_icon)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        self.panel_2 = wx.Panel(self, wx.ID_ANY)
        self.panel_2.SetBackgroundColour(wx.Colour(112, 112, 112))
        self.panel_2.SetForegroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_HIGHLIGHTTEXT))
        sizer_3.Add(self.panel_2, 1, wx.EXPAND, 0)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_4.Add(sizer_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 15)

        avatar = wx.StaticBitmap(self.panel_2, wx.ID_ANY, MyBitmap(APP_ABOUT_ICON), style=wx.BORDER_NONE)
        sizer_6.Add(avatar, 0, 0, 0)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_4.Add(sizer_7, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        grid_sizer_1 = wx.FlexGridSizer(3, 1, 0, 0)
        sizer_7.Add(grid_sizer_1, 1, wx.EXPAND, 0)

        name = wx.StaticText(self.panel_2, wx.ID_ANY, "ArchOctopus")
        name.SetFont(wx.Font(20, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Microsoft YaHei UI"))
        grid_sizer_1.Add(name, 0, wx.ALL, 5)

        self.release_info = wx.StaticText(self.panel_2, wx.ID_ANY, u"版本：1.840 64bit\n日期：Jan 01 2019")
        self.release_info.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Microsoft YaHei UI"))
        grid_sizer_1.Add(self.release_info, 0, wx.ALL, 5)

        about = wx.StaticText(self.panel_2, wx.ID_ANY, u"本程序起源于本人日常工作上的需要。\n旨在帮助建筑师快速、批量化的收集建筑设计类的素材资料。\n任何人均可随意使用或分发，但不得用于任何盈利目的。")
        about.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Microsoft YaHei UI"))
        grid_sizer_1.Add(about, 0, wx.ALL, 5)

        self.panel_3 = wx.Panel(self, wx.ID_ANY)
        self.panel_3.SetMinSize((-1, 60))
        self.panel_3.SetBackgroundColour(wx.Colour(90, 90, 90))
        self.panel_3.SetForegroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_HIGHLIGHTTEXT))
        self.panel_3.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 1, "Microsoft YaHei UI"))
        sizer_3.Add(self.panel_3, 0, wx.EXPAND, 0)

        sizer_5 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_2 = wx.GridSizer(1, 6, 0, 0)
        sizer_5.Add(grid_sizer_2, 1, wx.EXPAND | wx.TOP, 5)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        self.home_page = wx.StaticText(self.panel_3, wx.ID_ANY, u"官方主页")
        grid_sizer_2.Add(self.home_page, 0, wx.ALIGN_CENTER, 0)

        self.donate_page = wx.StaticText(self.panel_3, wx.ID_ANY, u"打赏捐助")
        grid_sizer_2.Add(self.donate_page, 0, wx.ALIGN_CENTER, 0)

        self.feedback_page = wx.StaticText(self.panel_3, wx.ID_ANY, u"意见反馈")
        grid_sizer_2.Add(self.feedback_page, 0, wx.ALIGN_CENTER, 0)

        self.source_page = wx.StaticText(self.panel_3, wx.ID_ANY, u"开源代码")
        grid_sizer_2.Add(self.source_page, 0, wx.ALIGN_CENTER, 0)

        grid_sizer_2.Add((0, 0), 0, 0, 0)

        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_5.Add(sizer_8, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        label_4 = wx.StaticText(self.panel_3, wx.ID_ANY, u"© 2017 ArchOctopus by CorttChan. All rights reserved ")
        label_4.SetForegroundColour(wx.Colour(210, 210, 210))
        label_4.SetFont(wx.Font(8, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Microsoft YaHei UI"))
        sizer_8.Add(label_4, 0, 0, 0)

        self.panel_3.SetSizer(sizer_5)

        self.panel_2.SetSizer(sizer_4)

        self.SetSizer(sizer_3)

        self.Layout()
        self.Centre()
        # end wxGlade

# end of class MyAbout

class AccountPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AccountPanel.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)

        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)

        self.panel_3 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_NONE)
        self.panel_3.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_LIGHT, 0, "Microsoft YaHei UI Light"))
        sizer_1.Add(self.panel_3, 2, wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)

        self.avatar = wx.StaticBitmap(self.panel_3, wx.ID_ANY, svg_bitmap(ACCOUNT_CIRCLE, 100, 100, wx.Colour((160, 160, 160))))
        sizer_2.Add(self.avatar, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 80)

        self.user_name = wx.StaticText(self.panel_3, wx.ID_ANY, "NnllUser", style=wx.ALIGN_CENTER_HORIZONTAL)
        self.user_name.SetFont(wx.Font(12, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Microsoft YaHei UI"))
        sizer_2.Add(self.user_name, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 5)

        self.email = wx.StaticText(self.panel_3, wx.ID_ANY, u"未检测到本地账户", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_2.Add(self.email, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.site_dir_btn = wx.Button(self.panel_3, wx.ID_ANY, u"打开同步文件夹", style=wx.BORDER_NONE)
        self.site_dir_btn.SetMinSize((-1, 35))
        sizer_2.Add(self.site_dir_btn, 0, wx.ALL | wx.EXPAND, 10)

        static_line_1 = wx.StaticLine(self, wx.ID_ANY, style=wx.LI_VERTICAL)
        sizer_1.Add(static_line_1, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 10)

        self.boards_panel = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.boards_panel.SetScrollRate(10, 10)
        sizer_1.Add(self.boards_panel, 5, wx.EXPAND, 0)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        self.items_sizer = wx.WrapSizer(wx.HORIZONTAL)
        sizer_3.Add(self.items_sizer, 0, wx.ALL, 5)

        self.boards_panel.SetSizer(sizer_3)

        self.panel_3.SetSizer(sizer_2)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.on_open_site_dir, self.site_dir_btn)
        # end wxGlade

    def on_open_site_dir(self, event):  # wxGlade: AccountPanel.<event_handler>
        print("Event handler 'on_open_site_dir' not implemented!")
        event.Skip()

# end of class AccountPanel

class BoardPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: BoardPanel.__init__
        kwds["style"] = kwds.get("style", 0) | wx.BORDER_NONE | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.SetSize((176, 176))
        self.SetBackgroundColour(wx.Colour(240, 240, 240))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.board_cover = wx.StaticBitmap(self, wx.ID_ANY, MyBitmap(BOARD_COVER), style=wx.BORDER_NONE)
        self.board_cover.SetMinSize((-1, 126))
        sizer_1.Add(self.board_cover, 0, wx.EXPAND, 0)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 5)

        self.board_name = wx.StaticText(self, wx.ID_ANY, "board_name", style=wx.ST_ELLIPSIZE_END | wx.ST_NO_AUTORESIZE)
        self.board_name.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Microsoft YaHei UI"))
        sizer_3.Add(self.board_name, 0, wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(sizer_2, 0, wx.EXPAND, 0)

        self.board_detail = wx.StaticText(self, wx.ID_ANY, "board_detail", style=wx.ST_ELLIPSIZE_END | wx.ST_NO_AUTORESIZE)
        self.board_detail.SetForegroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_GRAYTEXT))
        sizer_2.Add(self.board_detail, 1, wx.ALIGN_CENTER_VERTICAL, 0)

        self.state_sb = wx.StaticBitmap(self, wx.ID_ANY, svg_bitmap(PRIVATE))
        self.state_sb.Hide()
        sizer_2.Add(self.state_sb, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.SetSizer(sizer_1)

        self.Layout()
        # end wxGlade

# end of class BoardPanel

class DebugFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DebugFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.CLIP_CHILDREN | wx.FRAME_FLOAT_ON_PARENT | wx.FRAME_NO_TASKBAR
        wx.Frame.__init__(self, *args, **kwds)
        self.SetTitle("Debug Window")

        self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_SIMPLE)
        self.panel_1.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOWFRAME))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.log_tc = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_AUTO_URL | wx.TE_DONTWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
        self.log_tc.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOWFRAME))
        self.log_tc.SetForegroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_HIGHLIGHTTEXT))
        sizer_1.Add(self.log_tc, 1, wx.ALL | wx.EXPAND, 5)

        self.panel_1.SetSizer(sizer_1)

        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

# end of class DebugFrame

class TagPanel(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: TagPanel.__init__
        kwds["style"] = kwds.get("style", 0) | wx.BORDER_SIMPLE | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOWFRAME))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_2, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 8)

        tag_bitmap = wx.StaticBitmap(self, wx.ID_ANY, svg_bitmap(TAG, colour=wx.WHITE), style=wx.BORDER_NONE)
        sizer_2.Add(tag_bitmap, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.TOP, 5)

        desc = wx.StaticText(self, wx.ID_ANY, u"添加标签: 使用 ”,” 分割.")
        desc.SetForegroundColour(wx.Colour(255, 255, 255))
        desc.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Microsoft YaHei UI"))
        sizer_2.Add(desc, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 10)

        self.tags_edit_ctrl = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_BESTWRAP | wx.TE_NO_VSCROLL | wx.TE_PROCESS_ENTER)
        self.tags_edit_ctrl.SetMinSize((350, -1))
        sizer_1.Add(self.tags_edit_ctrl, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 8)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()
        # end wxGlade

# end of class TagPanel

class TagsPopupCtl(BasePopupCtrl):
    def __init__(self, *args, **kwds):
        # begin wxGlade: TagsPopupCtl.__init__
        kwds["style"] = kwds.get("style", 0)
        BasePopupCtrl.__init__(self, *args, **kwds)
        self.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_WINDOWFRAME))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_2, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 8)

        tag_bitmap = wx.StaticBitmap(self, wx.ID_ANY, svg_bitmap(TAG, colour=wx.WHITE), style=wx.BORDER_NONE)
        sizer_2.Add(tag_bitmap, 0, wx.ALIGN_CENTER_VERTICAL | wx.BOTTOM | wx.TOP, 5)

        desc = wx.StaticText(self, wx.ID_ANY, u"添加标签: 使用 ”,” 分割.")
        desc.SetForegroundColour(wx.Colour(255, 255, 255))
        desc.SetFont(wx.Font(10, wx.FONTFAMILY_SWISS, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Microsoft YaHei UI"))
        sizer_2.Add(desc, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 10)

        self.tags_edit_ctrl = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_BESTWRAP | wx.TE_NO_VSCROLL | wx.TE_PROCESS_ENTER)
        self.tags_edit_ctrl.SetMinSize((350, -1))
        sizer_1.Add(self.tags_edit_ctrl, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 8)

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.Layout()
        # end wxGlade

# end of class TagsPopupCtl

class MyApp(wx.App):
    def OnInit(self):
        self.mainFrame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.mainFrame)
        self.mainFrame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    ArchOctopus = MyApp(0)
    ArchOctopus.MainLoop()
